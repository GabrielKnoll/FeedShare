generator prisma_client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id @default(uuid())
  handle              String
  displayName         String?
  profilePicture      String?
  createdAt           DateTime              @default(now())
  Share               Share[]
  feedCheckedAt       DateTime?
  twitterAccount      TwitterAccount?
  feedToken           String                @unique
  AddedToPersonalFeed AddedToPersonalFeed[]
}

model TwitterAccount {
  id        String   @id
  token     String?
  secret    String?
  following String[]
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}

model Share {
  id                  String                @id @default(uuid())
  authorId            String
  author              User                  @relation(fields: [authorId], references: [id])
  episodeId           String
  episode             Episode               @relation(fields: [episodeId], references: [id])
  message             String?
  createdAt           DateTime              @default(now())
  hideFromGlobalFeed  Boolean               @default(false)
  AddedToPersonalFeed AddedToPersonalFeed[]

  @@unique([episodeId, authorId])
}

model AddedToPersonalFeed {
  share   Share  @relation(fields: [shareId], references: id)
  shareId String
  user    User   @relation(fields: [userId], references: id)
  userId  String

  @@id([shareId, userId])
}

model Episode {
  id              String       @id
  title           String
  share           Share[]
  podcast         Podcast      @relation(fields: [podcastId], references: [id])
  podcastId       String
  description     String?
  durationSeconds Int?
  enclosureUrl    String
  enclosureType   String
  datePublished   DateTime
  enclosureLength Int?
  artwork         String?
  url             String?
  apiResponse     Json
  Reolve          UrlResolve[]
}

model Podcast {
  id          String       @id
  title       String
  Episode     Episode[]
  itunesId    Int          @unique
  publisher   String
  description String?
  feed        String       @unique
  url         String?
  artwork     String?
  apiResponse Json
  Reolve      UrlResolve[]
}

model UrlResolve {
  url       String   @id
  createdAt DateTime @default(now())
  podcast   Podcast? @relation(fields: [podcastId], references: [id])
  episode   Episode? @relation(fields: [episodeId], references: [id])
  episodeId String?
  podcastId String?
}

model PodcastClient {
  id                        String  @id
  displayName               String
  icon                      String
  subscribeUrl              String
  subscribeUrlNeedsProtocol Boolean
}
