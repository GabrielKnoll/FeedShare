### This file was generated by Nexus Schema
### Do not make changes to this file directly


type CountableUserConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [CountableUserEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int
}

type CountableUserEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: User
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Episode implements Node {
  artwork(scale: Int!, size: Int!): String
  datePublished: DateTime!
  description: String
  durationSeconds: Int

  """Unique identifier for the resource"""
  id: ID!
  podcast: Podcast!
  title: String!
  url: String
}

enum FeedType {
  Global
  Personal
  User
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type Mutation {
  addToPersonalFeed(shareId: ID!): Share
  createShare(episodeId: ID!, hideFromGlobalFeed: Boolean = false, message: String!, shareOnTwitter: Boolean): Share
  createViewer(twitterId: String!, twitterToken: String!, twitterTokenSecret: String!): Viewer
}

interface Node {
  """Unique identifier for the resource"""
  id: ID!
}

type Page {
  contentHTML: String
  id: ID!
  title: String!
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type Podcast implements Node {
  artwork(scale: Int!, size: Int!): String
  description: String
  feed: String!

  """Unique identifier for the resource"""
  id: ID!
  latestEpisodes(length: Int = 10): [Episode]
  publisher: String!
  title: String!
  url: String
}

type PodcastClient implements Node {
  displayName: String!
  icon: String!

  """Unique identifier for the resource"""
  id: ID!
  subscribeUrl: String!
  subscribeUrlNeedsProtocol: Boolean!
}

type Query {
  findPodcast(query: String!): [Podcast]
  node(id: ID!): Node
  pages: [Page]
  podcastClient: [PodcastClient]
  resolveShareUrl(url: String!): ResolvedShareUrl
  shares(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String
    feedType: FeedType!

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): ShareConnection!
  typeaheadPodcast(query: String!): [Podcast]
  viewer: Viewer
}

type ResolvedShareUrl {
  episode: Episode
  podcast: Podcast
}

type SearchResult {
  feedId: ID
  title: String!
}

type Share implements Node {
  author: User!
  createdAt: DateTime!
  episode: Episode!

  """Unique identifier for the resource"""
  id: ID!
  isInFeed(feedType: FeedType!): Boolean
  message: String
}

type ShareConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [ShareEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type ShareEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Share
}

type User implements Node {
  displayName: String
  followers(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): CountableUserConnection!
  following(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): CountableUserConnection!
  handle: String!

  """Unique identifier for the resource"""
  id: ID!
  profilePicture(scale: Int!, size: Int!): String
}

type Viewer {
  messageLimit: Int!
  personalFeed: String!
  personalFeedLastChecked: DateTime
  token: String!
  user: User!
}
