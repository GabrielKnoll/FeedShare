### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Episode implements Node {
  artwork(scale: Int!, size: Int!): String
  datePublished: DateTime!
  description: String
  durationSeconds: Int

  """Unique identifier for the resource"""
  id: ID!
  podcast: Podcast!
  title: String!
}

enum FeedType {
  Friends
  Global
  Personal
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type Mutation {
  createShare(episodeId: ID!, message: String): Share
  createViewer(twitterId: String!, twitterToken: String!, twitterTokenSecret: String!): Viewer
}

interface Node {
  """Unique identifier for the resource"""
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
}

type Podcast implements Node {
  artwork(scale: Int!, size: Int!): String
  description: String
  feed: String!

  """Unique identifier for the resource"""
  id: ID!
  latestEpisodes(length: Int = 10): [Episode]
  publisher: String!
  title: String!
}

type PodcastClient implements Node {
  displayName: String!
  icon: String!

  """Unique identifier for the resource"""
  id: ID!
  subscribeUrl: String!
  subscribeUrlNeedsProtocol: Boolean!
}

type Query {
  findPodcast(query: String!): [Podcast]
  node(id: ID!): Node
  podcastClient: [PodcastClient]
  resolveShareUrl(url: String!): ResolvedShareUrl
  shares(after: String, before: String, feedType: FeedType, last: Int!): ShareConnection!
  typeaheadPodcast(query: String!): [Podcast]
  viewer: Viewer
}

type ResolvedShareUrl {
  episode: Episode
  podcast: Podcast
}

type SearchResult {
  feedId: ID
  title: String!
}

type Share implements Node {
  author: User!
  createdAt: DateTime!
  episode: Episode!

  """Unique identifier for the resource"""
  id: ID!
  message: String
}

type ShareConnection {
  edges: [ShareEdge]
  pageInfo: PageInfo
}

type ShareEdge {
  cursor: String
  node: Share
}

type User implements Node {
  displayName: String
  following(limit: Int): [User]
  handle: String!

  """Unique identifier for the resource"""
  id: ID!
  profilePicture(scale: Int!, size: Int!): String
}

type Viewer {
  messageLimit: Int!
  personalFeed: String!
  token: String!
  user: User!
}
