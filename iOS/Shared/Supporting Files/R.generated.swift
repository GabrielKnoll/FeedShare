//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
public struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  public static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  /// This `R.color` struct is generated, and contains static references to 3 colors.
  public struct color {
    /// Color `Accent`.
    public static let accent = Rswift.ColorResource(bundle: R.hostingBundle, name: "Accent")
    /// Color `Background`.
    public static let background = Rswift.ColorResource(bundle: R.hostingBundle, name: "Background")
    /// Color `DropShadow`.
    public static let dropShadow = Rswift.ColorResource(bundle: R.hostingBundle, name: "DropShadow")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Accent", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func accent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accent, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Background", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "DropShadow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func dropShadow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.dropShadow, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 2 files.
  public struct file {
    /// Resource file `IBMPlexSans-Medium.ttf`.
    public static let ibmPlexSansMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "IBMPlexSans-Medium", pathExtension: "ttf")
    /// Resource file `IBMPlexSans-Regular.ttf`.
    public static let ibmPlexSansRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "IBMPlexSans-Regular", pathExtension: "ttf")

    /// `bundle.url(forResource: "IBMPlexSans-Medium", withExtension: "ttf")`
    public static func ibmPlexSansMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ibmPlexSansMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "IBMPlexSans-Regular", withExtension: "ttf")`
    public static func ibmPlexSansRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ibmPlexSansRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 2 fonts.
  public struct font: Rswift.Validatable {
    /// Font `IBMPlexSans-Medium`.
    public static let ibmPlexSansMedium = Rswift.FontResource(fontName: "IBMPlexSans-Medium")
    /// Font `IBMPlexSans`.
    public static let ibmPlexSans = Rswift.FontResource(fontName: "IBMPlexSans")

    /// `UIFont(name: "IBMPlexSans", size: ...)`
    public static func ibmPlexSans(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ibmPlexSans, size: size)
    }

    /// `UIFont(name: "IBMPlexSans-Medium", size: ...)`
    public static func ibmPlexSansMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ibmPlexSansMedium, size: size)
    }

    public static func validate() throws {
      if R.font.ibmPlexSans(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'IBMPlexSans' could not be loaded, is 'IBMPlexSans-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ibmPlexSansMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'IBMPlexSans-Medium' could not be loaded, is 'IBMPlexSans-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 2 images.
  public struct image {
    /// Image `Composer`.
    public static let composer = Rswift.ImageResource(bundle: R.hostingBundle, name: "Composer")
    /// Image `Logo`.
    public static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Logo")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Composer", bundle: ..., traitCollection: ...)`
    public static func composer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.composer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Logo", bundle: ..., traitCollection: ...)`
    public static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  public struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 1 localization keys.
    public struct localizable {
      /// en translation: I've just listend to this episode of Luftpost Podcast. The guest really gave some exiting insights into travelling in Senegal!
      ///
      /// Locales: en, de
      public static let testShareMessage = Rswift.StringResource(key: "test.share.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)

      /// en translation: I've just listend to this episode of Luftpost Podcast. The guest really gave some exiting insights into travelling in Senegal!
      ///
      /// Locales: en, de
      public static func testShareMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("test.share.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "test.share.message"
        }

        return NSLocalizedString("test.share.message", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

public struct _R {
  fileprivate init() {}
}
